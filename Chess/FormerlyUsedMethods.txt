
FORMER wPAWNMOVES METHOD:

string wPawnMoves(moveParams, string lastMove) { //7 9 15 17

#define testPoint ((PawnMoves>>i) & 1) == 1 //checks if a point (defined by i in the bitboard) is occupied
#define ts std::to_string

	string moves{};



	//capturing outside 8th rank

	bb PawnMoves = (WP >> 7) & black & ~rank8 & ~fileA; //capturing to right

	for (int i = 0; i < 64; i++) {
		if (testPoint) moves += " " + ts(i / 8 + 1) + ts(i % 8 - 1) + ts(i / 8) + ts(i % 8);
	}

	PawnMoves = (WP >> 9) & black & ~rank8 & ~fileH; //capturing to the left

	for (int i = 0; i < 64; i++) {
		if (testPoint) moves += " " + ts(i / 8 + 1) + ts(i % 8 + 1) + ts(i / 8) + ts(i % 8);
	}

	//moving up 1 square

	PawnMoves = (WP >> 8) & ~rank8 & emptySquare;

	for (int i = 0; i < 64; i++) {
		if (testPoint) moves += " " + ts(i / 8 + 1) + ts(i % 8) + ts(i / 8) + ts(i % 8);
	}
	
	//moving up 2 squares

	PawnMoves = ((WP >> 16) & rank4 & emptySquare) & ((WP >> 8) & ~rank8 & emptySquare) >> 8;

	for (int i = 0; i < 64; i++) {
		if (testPoint) moves += " " + ts(i / 8 + 2) + ts(i % 8) + ts(i / 8) + ts(i % 8);
	}
	
	//capturing and moving onto 8th rank (promotion);

	PawnMoves = (WP >> 7) & rank8 & black; //right

	for (int i = 0; i < 64; i++) {
		if (testPoint) {
			moves += pawnPromo(ts(i / 8 + 1) + ts(i % 8 - 1) + ts(i / 8) + ts(i % 8));
		}
	}

	PawnMoves = (WP >> 9) & rank8 & black; //left

	for (int i = 0; i < 64; i++) {
		if (testPoint) {
			moves += pawnPromo(ts(i / 8 + 1) + ts(i % 8 + 1) + ts(i / 8) + ts(i % 8));
		}
	}

	//moving onto the 8th rank as normal

	PawnMoves = (WP >> 8) & rank8 & emptySquare;

	for (int i = 0; i < 64; i++) {
		if (testPoint) {
			moves += pawnPromo(ts(i / 8 + 1) + ts(i % 8) + ts(i / 8) + ts(i % 8));
		}
	}

	//IMPLEMENT EN PASSANT BELOW
	
	if (lastMove.size()) {
		if (lastMove[0] == 'p') {
			try {
				int rowF = lastMove[1]-'0';
				int colF = lastMove[2]-'0';
				int rowT = lastMove[3]-'0';
				int colT = lastMove[4]-'0';

				if (rowF == 1 && rowT == 3) {

					bb pos = pow(2, 24 + colT); //24 is rowT*8

					PawnMoves = pos << 1 & ~fileH & WP; //1 left and 1 up

					for (int i = 0; i < 64; i++) {
						if (testPoint) {
							moves += " " + (ts(i / 8) + ts(i % 8) + ts(i / 8 - 1) + ts(i % 8 - 1));
						}
					}

					PawnMoves = pos >> 1 & ~fileA & WP; //1 right and 1 up

					for (int i = 0; i < 64; i++) {
						if (testPoint) {
							moves += " " + (ts(i / 8) + ts(i % 8) + ts(i / 8 - 1) + ts(i % 8 + 1));
						}
					}

				}
			
			}
			catch (...) {
				
			}
		}
	}

	//IMPLEMENT EN PASSANT ABOVE

#undef testPoint
#undef ts

	return moves;

}

FORMER wKnightMoves METHOD:

string wKnightMoves(moveParams) { //shift 6, 10, 15, or 17 in either direc                      
	


	string moves{};
	
	bb knightMoves =  WN >> 6 & ~fileA & ~fileB & ~white; //2 right, 1 up

#define testPoint ((knightMoves>>i) & 1) == 1 //checks if a point (defined by i in the bitboard) is occupied


	for (int i = 0; i < 64; i++) {
		if (testPoint) {
			moves += " " + ts(i / 8 + 1) + ts(i % 8 - 2) + ts(i / 8) + ts(i % 8);
		}

	}
	
	knightMoves = WN >> 10 & ~fileG & ~fileH & ~white; //2 left, 1 up

	for (int i = 0; i < 64; i++) {
		if (testPoint) moves += " " + ts(i / 8 + 1) + ts(i % 8 + 2) + ts(i / 8) + ts(i % 8);
	}

	knightMoves = WN >> 15 & ~fileA & ~white; //1 right, 2 up

	for (int i = 0; i < 64; i++) {
		if (testPoint) moves += " " + ts(i / 8 + 2) + ts(i % 8 - 1) + ts(i / 8) + ts(i % 8);
	}

	knightMoves = WN >> 17 & ~fileH & ~white; //1 left, 2 up

	for (int i = 0; i < 64; i++) {
		if (testPoint) moves += " " + ts(i / 8 + 2) + ts(i % 8 + 1) + ts(i / 8) + ts(i % 8);
	}

	knightMoves = WN << 6 & ~fileH & ~fileG & ~white; //2 left, 1 down

	for (int i = 0; i < 64; i++) {
		if (testPoint) moves += " " + ts(i / 8 - 1) + ts(i % 8 + 2) + ts(i / 8) + ts(i % 8);
	}

	knightMoves = WN << 10 & ~fileA & ~fileB & ~white; //2 right, 1 down

	for (int i = 0; i < 64; i++) {
		if (testPoint) moves += " " + ts(i / 8 - 1) + ts(i % 8 - 2) + ts(i / 8) + ts(i % 8);
	}

	knightMoves = WN << 15 & ~fileH & ~white; //1 left, 2 down

	for (int i = 0; i < 64; i++) {
		if (testPoint) moves += " " + ts(i / 8 - 2) + ts(i % 8 + 1) + ts(i / 8) + ts(i % 8);
	}

	knightMoves = WN << 17 & ~fileA & ~white; //1 right, 2 down

	for (int i = 0; i < 64; i++) {
		if (testPoint) moves += " " + ts(i / 8 - 2) + ts(i % 8 - 1) + ts(i / 8) + ts(i % 8);
	}

#undef testPoint

	return moves;
}

FORMER wKingsMoves METHOD:


string wKingMoves(moveParams) {

	string moves{};

	bb kingMoves = WK >> 7 & ~white & ~fileA; //1 up, 1 right

#define testPoint ((kingMoves>>i) & 1) == 1 //checks if a point (defined by i in the bitboard) is occupied
#define ts std::to_string

	for (int i = 0; i < 64; i++) {
		if (testPoint) moves += " " + ts(i / 8 + 1) + ts(i % 8 - 1) + ts(i / 8) + ts(i % 8);
	}

	kingMoves = WK >> 8 & ~white; //1 up

	for (int i = 0; i < 64; i++) {
		if (testPoint) moves += " " + ts(i / 8 + 1) + ts(i % 8) + ts(i / 8) + ts(i % 8);
	}

	kingMoves = WK >> 9 & ~white & ~fileH; //1 up, 1 left

	for (int i = 0; i < 64; i++) {
		if (testPoint) moves += " " + ts(i / 8 + 1) + ts(i % 8 + 1) + ts(i / 8) + ts(i % 8);
	}

	kingMoves = WK >> 1 & ~white & ~fileH; //1 left

	for (int i = 0; i < 64; i++) {
		if (testPoint) moves += " " + ts(i / 8) + ts(i % 8 + 1) + ts(i / 8) + ts(i % 8);
	}

	kingMoves = WK << 1 & ~white & ~fileA; //1 right

	for (int i = 0; i < 64; i++) {
		if (testPoint) moves += " " + ts(i / 8) + ts(i % 8 - 1) + ts(i / 8) + ts(i % 8);
	}

	kingMoves = WK << 7 & ~white & ~fileH; //1 left 1 down

	for (int i = 0; i < 64; i++) {
		if (testPoint) moves += " " + ts(i / 8 - 1) + ts(i % 8 + 1) + ts(i / 8) + ts(i % 8);
	}

	kingMoves = WK << 8 & ~white; //1 down

	for (int i = 0; i < 64; i++) {
		if (testPoint) moves += " " + ts(i / 8 - 1) + ts(i % 8) + ts(i / 8) + ts(i % 8);
	}

	kingMoves = WK << 9 & ~white & ~fileA; //1 down 1 right

	for (int i = 0; i < 64; i++) {
		if (testPoint) moves += " " + ts(i / 8 - 1) + ts(i % 8 - 1) + ts(i / 8) + ts(i % 8);
	}

	return moves;

}

FIND CHECKER WHITE:

bb* findCheckerWhite(moveParams) { //finds black piece(s) checking white king

	bb* checkers = new bb[2]; //max amount of checkers is 2. you MUST move king in a double check
	checkers[0] = 0;
	checkers[1] = 0; //if the 2nd cheker is 0, it is not a double check

	int i{};

	bb U = WK;
	while (U != (U | U>>8)) { //goes through to find a potential checker above the king
		U |= U >> 8;
		U = ~WK & U;           //nots the king (needed as pieces check if they can block the king by anding the checker line)
		if (U & (BR | BQ)) {
			checkers[i] = U;
			++i;
			break;
		}
		if (U & ~emptySquare & ~(BR | BQ)) { //if it finds a non-checker piece, break.
			break;
		}
	}

	bb R = WK;
	while (R != (R | R << 1) && (!(R & fileA) || R == WK)) { //check over this later
		R |= R << 1;
		R = ~WK & R;
		if (R & (BR | BQ)) {
			checkers[i] = R;
			++i;
			break;
		}
		if (R & ~emptySquare & ~(BR | BQ)) {
			break;
		}
	}

	if (i == 2) return checkers; //you cant have more than 2 checkers, so if the checkers number is 1 it just quits

	bb D = WK;
	while (D != (D | D << 8)) {
		D |= D << 8;
		D = ~WK & D;
		if (D & (BR | BQ)) {
			checkers[i] = D;
			++i;
			break;
		}
		if (D & ~emptySquare & ~(BR | BQ)) {
			break;
		}
	}

	if (i == 2) return checkers;

	bb L = WK;
	while (L != (L | L >> 1) && (!(L & fileH) || L == WK)) { //check over this later
		L |= L >> 1;
		L = ~WK & L;
		if (L & (BR | BQ)) {
			checkers[i] = L;
			++i;
			break;
		}
		if (L & ~emptySquare & ~(BR | BQ)) {
			break;
		}
	}

	if (i == 2) return checkers;

	bb UR = WK;
	while (UR != (UR | UR >> 7) && (!(UR & fileA) || UR == WK)) { //check over this later
		UR |= UR >> 7;
		UR = ~WK & UR;
		if (UR & (BB | BQ)) {
			checkers[i] = UR;
			++i;
			break;
		}
		if (UR & ~emptySquare & ~(BB | BQ)) {
			break;
		}
	}

	if (i == 2) return checkers;

	bb DR = WK;
	while (DR != (DR | DR << 9) && (!(DR & fileA) || DR == WK)) { //check over this later
		DR |= DR << 9;
		DR = ~WK & DR;
		if (DR & (BB | BQ)) {
			checkers[i] = DR;
			++i;
			break;
		}
		if (DR & ~emptySquare & ~(BB | BQ)) {
			break;
		}
	}

	if (i == 2) return checkers;

	bb DL = WK;
	while (DL != (DL | DL << 7) && (!(DL & fileH) || DL == WK)) { //check over this later
		DL |= DL << 7;
		if (DL & (BB | BQ)) {
			checkers[i] = DR;
			++i;
			break;
		}
		if (DR & ~emptySquare & ~(BB | BQ)) {
			break;
		}
	}

	if (i == 2) return checkers;
	
	bb UL = WK;
	while (UL != (UL | UL >> 9) && (!(UL & fileH) || UL == WK)) { //check over this later
		UL |= UL >> 9;
		UL = ~WK & UL;
		if (UL & (BB | BQ)) {
			checkers[i] = UL;
			++i;
			break;
		}
		if (UL & ~emptySquare & ~(BB | BQ)) {
			break;
		}
	}

	if (i == 2) return checkers;

	if (WK >> 9 & BP) { //checks for pawns using a simple if statement
		checkers[i] = WK >> 9;
	}

	if (i == 2) return checkers;

	if (WK >> 7 & BP) {
		checkers[i] = WK >> 7;
	}

	if (i == 2) return checkers;

	//manually checks all possible knight checks



	if (WK >> 6 & BN & ~fileA & ~fileB) checkers[i] = WK >> 6;

	if (i == 2) return checkers;

	if (WK >> 10 & BN & ~fileG & ~fileH) checkers[i] = WK >> 10;

	if (i == 2) return checkers;

	if (WK >> 15 & BN & ~fileA) checkers[i] = WK >> 15;

	if (i == 2) return checkers;

	if (WK >> 17 & BN & ~fileH) checkers[i] = WK >> 17;

	if (i == 2) return checkers;

	if (WK << 6 & BN & ~fileH & ~fileG) checkers[i] = WK << 6;

	if (i == 2) return checkers;

	if (WK << 10 & ~fileA & ~fileB & BN) checkers[i] = WK << 10;

	if (i == 2) return checkers;

	if (WK << 15 & ~fileH & BN) checkers[i] = WK << 15;

	if (i == 2) return checkers;

	if (WK << 17 & ~fileA & BN) checkers[i] = WK << 17;

	return checkers;
}